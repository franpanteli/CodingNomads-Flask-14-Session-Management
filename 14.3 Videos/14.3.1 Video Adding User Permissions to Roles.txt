-> integrating permissions into a database  

-> add columns to the role model  
   -> default role column: marks a role as the default role (e.g., user role)  
   -> permissions column: encodes individual permissions as a single value  
   example:  
   class Role(db.Model):  
       id = db.Column(db.Integer, primary_key=True)  
       name = db.Column(db.String(64), unique=True)  
       default = db.Column(db.Boolean, default=False)  
       permissions = db.Column(db.Integer, default=0)  

-> override role class constructor  
   -> ensure permissions are set to `0` if not initialised  
   example:  
   def __init__(self, **kwargs):  
       super().__init__(**kwargs)  
       if self.permissions is None:  
           self.permissions = 0  

-> define individual permissions  
   -> create a class holding constants, where each constant is a power of 2  
   example:  
   class Permission:  
       READ = 0x01  
       WRITE = 0x02  
       ADMIN = 0x04  

-> helper functions for permissions  
   -> add permission  
      -> check if the permission is not already granted using an `if not` condition  
      example:  
      def add_permission(self, perm):  
          if not self.has_permission(perm):  
              self.permissions |= perm  

   -> remove permission  
      -> perform the reverse operation of adding a permission  
      example:  
      def remove_permission(self, perm):  
          if self.has_permission(perm):  
              self.permissions &= ~perm  

   -> reset permissions  
      -> set the permission value to `0`  
      example:  
      def reset_permissions(self):  
          self.permissions = 0  

   -> has permission  
      -> check if a particular permission exists  
         -> use a bitwise AND with the current permissions  
         -> if the result > 0, the permission exists  
      example:  
      def has_permission(self, perm):  
          return self.permissions & perm > 0  

-> test helper functions in flask shell  
   -> create a role and test the helper functions interactively  
   example:  
   from app.models import Role, Permission  
   admin_role = Role(name="Admin")  
   admin_role.add_permission(Permission.ADMIN)  
   admin_role.has_permission(Permission.ADMIN)  # True  
   admin_role.remove_permission(Permission.ADMIN)  
   admin_role.has_permission(Permission.ADMIN)  # False  

-> create a static method to automate role setup  
   -> set up roles for users, moderators, and administrators  
      -> users: basic permissions  
      -> moderators: one more permission than users  
      -> admin: all permissions  
   -> set the name of the default role as "user"  
   -> iterate through a dictionary of roles  
      -> if the role doesn't already exist, create it  
      -> reset and build the roles using dictionary values  
      -> set the flag for the default role  
   example:  
   class Role(db.Model):  
       # existing columns and methods...  

       @staticmethod  
       def insert_roles():  
           roles = {  
               'User': [Permission.READ],  
               'Moderator': [Permission.READ, Permission.WRITE],  
               'Administrator': [Permission.READ, Permission.WRITE, Permission.ADMIN]  
           }  
           default_role = 'User'  
           for name, perms in roles.items():  
               role = Role.query.filter_by(name=name).first()  
               if role is None:  
                   role = Role(name=name)  
               role.reset_permissions()  
               for perm in perms:  
                   role.add_permission(perm)  
               role.default = (role.name == default_role)  
               db.session.add(role)  
           db.session.commit()  

-> test the static method in flask shell  
   -> launch a flask shell and call the static method  
   example:  
   from app.models import Role  
   Role.insert_roles()  

-> automate role setup for new databases  
   -> call the static method whenever a new database is started to avoid manually adding roles  
