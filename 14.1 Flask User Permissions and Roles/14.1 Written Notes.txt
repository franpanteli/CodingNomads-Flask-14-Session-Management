-> you know what roles mean when it comes to a web app and how users fit in  
    -> in this lesson, you’ll learn how to represent roles and user permissions in your database  
    -> you’ll add a new column for user permissions in the roles table  
    -> the new integer column will represent the permissions a user has  
    -> the combination of permissions can be represented by a number, which uses binary values  

-> adding user permissions to roles  
    -> you’ll add a new column for permissions in the roles table  
    -> permissions are represented as binary numbers  
    -> a constructor is added to set the permissions to 0 by default  
    -> you’ll use a boolean value for the default role, which automatically applies permissions to new users  
    -> the "normal user" role is typically assigned by default  

-> what are user permissions?  
    -> permissions determine what tasks a user can and can’t do  
    -> in the ragtime app example, permissions include tasks like "follow other users", "comment on compositions", "publish compositions", etc.  
    -> each task has an associated permission name and value  
    -> permission values follow a binary pattern, represented in decimal and binary numbers  

-> example of permission values in binary  
    -> follow: 1 (binary 00001)  
    -> comment: 2 (binary 00010)  
    -> publish: 4 (binary 00100)  
    -> moderate: 8 (binary 01000)  
    -> admin: 16 (binary 10000)  

-> manipulating user permissions with python  
    -> you can define functions to make handling permissions easier  
    -> functions like add_permission(), remove_permission(), and reset_permissions() help manage user permissions  
    -> permissions are updated by adding or removing permission values  
    -> the has_permission() method uses bitwise and to check if a user has a certain permission  

-> example of permission manipulation  
    -> add permission: checks if the user already has the permission before adding it  
    -> remove permission: removes the permission if the user has it  
    -> reset permissions: clears all permissions  

-> updating roles with permissions  
    -> a static method can be used to insert roles with their mapped permissions  
    -> the insert_roles() method defines a mapping of role names with corresponding permissions  
    -> the method ensures roles are only inserted if they don’t already exist in the database  
    -> the default role is set to ‘user’, and roles like ‘moderator’ and ‘administrator’ are defined with additional permissions  

-> the new roles and permissions system helps manage user permissions more efficiently in flask apps  
    -> each role can be given specific permissions, and new roles can be added easily  
    -> permissions are represented as binary values, which helps with efficient checks and manipulations  
    -> this method avoids needing to create extra logic for assigning permissions to individual users  
